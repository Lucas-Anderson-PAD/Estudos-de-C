Exercício 4: Manipulação de Listas Encadeadas com Arquivos de Texto
Nível: Intermediário
Objetivo: Trabalhar com alocação dinâmica, listas encadeadas e manipulação de arquivos de texto.

Enunciado:
Implemente um programa em C que leia informações de livros a partir de um arquivo de texto e armazene essas informações em uma lista encadeada. Cada linha do arquivo de texto contém o título do livro, o nome do autor e o ano de publicação.

O programa deve permitir que o usuário escolha entre as seguintes opções:

1. Exibir todos os livros na tela.
2. Exibir o número de livros publicados após um ano informado pelo usuário.
3. Exibir o título e autor do livro mais recente.

Entrada do arquivo livros.txt:

O Hobbit J.R.R. Tolkien 1937
Dom Casmurro Machado de Assis 1899
1984 George Orwell 1949

Requisitos:
- O programa deve usar uma lista encadeada para armazenar os livros.
- Deve ser possível inserir os dados de forma dinâmica e interativa.
- Ao final, a memória deve ser liberada.
- O programa deve realizar operações de leitura de arquivos de texto e manipulação de listas encadeadas.


Exercício 5: Manipulação de Arquivos Binários com Listas Encadeadas
Nível: Avançado
Objetivo: Manipulação de arquivos binários, listas encadeadas e alocação dinâmica de structs.

Enunciado:
Implemente um programa em C para gerenciar uma lista de produtos em um estoque. Cada produto possui o nome, código, quantidade em estoque e preço. O programa deve ler os dados de um arquivo binário que armazena informações sobre os produtos.

O programa deve fornecer ao usuário as seguintes opções:

1. Exibir todos os produtos na tela.
2. Buscar um produto pelo código e exibir suas informações.
3. Atualizar a quantidade de um produto (em estoque) com base em um código de produto informado.
4. Salvar as alterações de volta no arquivo binário.

A estrutura de dados do produto será:

typedef struct Produto {
    char nome[100];
    int codigo;
    int quantidade;
    float preco;
    struct Produto* proximo;
} Produto;

Entrada de arquivo binário produtos.dat:
- O arquivo já contém dados binários que representam a lista encadeada de produtos.

Requisitos:
- Leitura e escrita de arquivos binários.
- Manipulação de listas encadeadas.
- Realização de operações de busca e atualização na lista.
- O programa deve liberar a memória corretamente ao final.


Exercício 6: Sistema de Vendas com Arquivos Binários e Listas Encadeadas
Nível: Superior
Objetivo: Manipulação avançada de arquivos binários, listas encadeadas e alocação dinâmica com operações complexas.

Enunciado:
Implemente um programa em C para gerenciar um sistema de vendas em uma loja de eletrônicos. O sistema deve armazenar informações sobre vendas de produtos, sendo que cada venda tem um código de produto, o nome do cliente, a data da venda e a quantidade comprada.

Os dados das vendas e dos produtos devem ser armazenados em arquivos binários separados. O programa deve permitir que o usuário:

1. Adicione uma venda ao sistema.
2. Exiba todas as vendas de um determinado produto.
3. Exiba as vendas realizadas por um cliente específico.
4. Calcule o total vendido de um produto (quantidade * preço).
5. Salve os dados de vendas em um arquivo binário e leia de volta, mantendo a lista de vendas atualizada.

A estrutura dos dados será a seguinte:

typedef struct Produto {
    int codigo;
    char nome[100];
    float preco;
} Produto;

typedef struct Venda {
    Produto produto;
    char cliente[100];
    char data[11];  // Formato: DD/MM/AAAA
    int quantidade;
    struct Venda* proximo;
} Venda;

Entrada do arquivo produtos.dat (binário):
- O arquivo contém a lista de produtos com suas informações (código, nome e preço).

Entrada do arquivo vendas.dat (binário):
- O arquivo contém a lista de vendas, com as informações de produto, cliente, data e quantidade.

Requisitos:
- Manipulação de arquivos binários e de listas encadeadas.
- Operações de adição, busca e cálculo de vendas.
- O programa deve manter a integridade dos dados, permitindo atualizações e leituras dinâmicas.
- A memória alocada deve ser liberada corretamente no final.
